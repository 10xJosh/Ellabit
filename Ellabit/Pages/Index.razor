@page "/"
@using DynamicCode
@using System.Reflection
@inject IJSRuntime JS
<PageTitle>Index</PageTitle>


Current temperature is: @temp
<br/>
<button @onclick="GetTempurature">Get Temperature</button>
<br/>
<button @onclick="Clear">Clear Cache</button>
<br/>
@editorCode
<br/>
    <div id="editor" style="width:800px;height:600px;border:1px solid grey"></div>
@code {
    int temp;
    [Inject]
    public SimpleUnloadable? _unloadable { get; set; }
    [Inject]
    public HttpClient? Client { get; set; }
    string? editorCode;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await BlazacoJSInterop.InitializeEditor(JS, "editor");
        //await JS.InvokeVoidAsync("initEditor");
        await base.OnAfterRenderAsync(firstRender);
    }
    public async void GetTempurature()
    {

        editorCode = await BlazacoJSInterop.GetValue(JS, "editor");

        temp = await GetNextTemp();
        StateHasChanged();
    }
    private async Task<int> GetNextTemp()
    {
        if (_unloadable == null || _unloadable.Context == null)
        {
            return -997;
        }
        var assembly = await _unloadable.Context.GetAssembly("RoslynCompileSample");
        Type? twriter = assembly?.GetType("RoslynCompileSample.LocalTemp");
        MethodInfo? method = twriter?.GetMethod("NextTemp");
        if (twriter == null)
        {
            return -999;
        }
        var writer = Activator.CreateInstance(twriter);
        var output = method?.Invoke(writer, new object[] { });
        writer = null;
        if (output == null)
        {
            return -998;
        }
        return (int)output;
    }
    public async void Clear()
    {
        await BlazacoJSInterop.SetValue(JS, "editor", "void Main() \n\tConsole.WriteLine(\"Clear\"); \n}");

        if (_unloadable == null)
        {
            return;
        }
        _unloadable.Context.Unload();
        GC.Collect();
        GC.WaitForPendingFinalizers();
        if (Client == null)
        {
            return;
        }
        _unloadable.Context = new SimpleUnloadableAssemblyLoadContext(Client);
    }
}


