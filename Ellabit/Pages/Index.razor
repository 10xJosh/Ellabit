@page "/{ChallengeId:int?}"
@inject NavigationManager NavMan
@using Ellabit.Challenges
<PageTitle>Ellabit</PageTitle>

<center><MudText Typo="Typo.h2" Color="Color.Primary"><strong>Ellabit</strong> - The interactive C# coding app.</MudText></center>
<MudCard Style="padding: 5px; margin: 5px;">
    <MudCardContent>
        <MudPaper Width="100%">

            <div class="explainList">
                <div class="explain">
                    <MudIcon Icon="@Icons.Material.Filled.Bookmark" Color="Color.Secondary" />
                    <MudText Color="Color.Primary">Don't feel overwhelmed because there is too much to learn.</MudText>
                </div>
                <div class="explain">
                    <MudIcon Icon="@Icons.Material.Filled.Bookmark" Color="Color.Secondary" />
                    <MudText Color="Color.Primary">Do a little at a time.</MudText>
                </div>
                <div class="explain">
                    <MudIcon Icon="@Icons.Material.Filled.Bookmark" Color="Color.Secondary" />
                    <MudText Color="Color.Primary">You will be given small concepts to learn and demonstrate.</MudText>
                </div>
                <div class="explain">
                    <MudIcon Icon="@Icons.Material.Filled.Bookmark" Color="Color.Secondary" />
                    <MudText Color="Color.Primary">Feel accomplished by doing many challenges.</MudText>
                </div>
            </div>
        </MudPaper>

    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary">Click on a challenge to get started.</MudButton>
    </MudCardActions>
</MudCard>

<MudField Label="Filter" Variant="Variant.Outlined" InnerPadding="false">
    <div class="d-flex flex-grow-1 gap-4 mb-2">
        <MudPaper Class="flex-initial d-flex" Width="50%" Elevation="0">

            <MudSelect Dense="true" T="string" Label="Tag Header" Variant="Variant.Outlined" @bind-Value="@SelectedTagHeader" SelectedValuesChanged="@OnSelectedTagHeaderValueChanged" Clearable="true">
                @foreach (var tag in Tags.Keys.OrderBy(t => t))
                {
                    <MudSelectItem Value="@tag" />
                }
            </MudSelect>
        </MudPaper>

        <MudPaper Class="flex-initial d-flex" Width="50%" Elevation="0">
            <MudSelect Dense="true" T="string" Label="Tag Detail" ReadOnly="@(string.IsNullOrEmpty(SelectedTagHeader))" Variant="Variant.Outlined" @bind-Value="@SelectedTagDetail" SelectedValuesChanged="@OnSelectedTagDetailValueChanged" Clearable="true">
                @if (!string.IsNullOrEmpty(SelectedTagHeader))
                {
                    @foreach (var tag in Tags[SelectedTagHeader].OrderBy(v => v))
                    {
                        <MudSelectItem Value="@tag" />
                    }
                }
            </MudSelect>
        </MudPaper>
    </div>
</MudField>

@if (Challenges != null)
{
    <MudTable Items="@FilterChallenges(Challenges)" Hover="true" Breakpoint="Breakpoint.Sm" OnRowClick="RowClickEvent" T="IChallenge">
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Description</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@(Challenges.IndexOf(context) + 1)</MudTd>
                <MudTd DataLabel="Sign">@context.Header</MudTd>
            </RowTemplate>
        </MudTable>
}

@code {
    [Parameter]
    public int? ChallengeId { get; set; }
    [Inject]
    private Challenges? Challenges { get; set; }

    private string SelectedTagHeader = string.Empty;
    private string SelectedTagDetail = string.Empty;
    private Dictionary<string, List<string>> Tags { get; set; } = new Dictionary<string, List<string>>();

    private void RowClickEvent(TableRowClickEventArgs<IChallenge> tableRowClickEventArgs)
    {
        if (Challenges == null)
        {
            return;
        }
        NavMan.NavigateTo($"challenge/{Challenges.IndexOf(tableRowClickEventArgs.Item)}");

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ChallengeId != null)
        {
            NavMan.NavigateTo($"challenge/{ChallengeId}");
            return;
        }
        if (Tags.Count == 0)
        {
            var tags = Challenges
                ?.SelectMany((c) => c.Tags)
                ?.GroupBy(o => CleanTagHeader(o.Key))
                ?.ToDictionary(
                    g => CleanTagHeader(g.Key)
                    , g => g
                        .Select(r => r.Value)
                        .Distinct()
                        .OrderBy(d => d)
                        .ToList()
                );

            if (tags != null)
            {
                Tags = tags;
                StateHasChanged();
            }
        }
    }
    private void OnSelectedTagHeaderValueChanged()
    {
        SelectedTagDetail = string.Empty;
        StateHasChanged();
    }
    private void OnSelectedTagDetailValueChanged()
    {
        StateHasChanged();
    }
    private List<IChallenge> FilterChallenges(Challenges challenges)
    {
        var result = new List<IChallenge>();
        if (!string.IsNullOrEmpty(SelectedTagHeader))
        {
            if (!string.IsNullOrEmpty(SelectedTagDetail))
            {
                result = challenges
                    .Where(c =>
                        {
                            return c.Tags.Any(ct => ct.Key == CleanTagHeader(SelectedTagHeader) && ct.Value == SelectedTagDetail);
                        })
                     .ToList();
                return result;
            }

            result = challenges
                .Where(c =>
                    {
                        return c.Tags.Any(ct => ct.Key == CleanTagHeader(SelectedTagHeader));
                    })
                 .ToList();
            return result;

        }
        return challenges;
    }
    private string CleanTagHeader(string tagHeader)
    {
        int pos = tagHeader.IndexOf(":");
        if (pos >= 0)
        {
            return tagHeader.Substring(0, pos);
        }
        return tagHeader;
    }
}

